#!/usr/bin/env/python

from contextlib import contextmanager
from curses import wrapper, echo, noecho, cbreak, nocbreak, newwin, error
from curses.textpad import rectangle
from math import floor
from subprocess import run, PIPE
from sys import argv


def input_char(textbox_window):
    textbox_window.clear()
    return textbox_window.getkey(*textbox_window.getyx())


def input_sequence(textbox_window, status_window, status):
    write_status(status_window, status + " (or Ctrl-C to cancel)")
    textbox_window.clear()
    echo()
    nocbreak()

    try:
        key_sequence = textbox_window.getstr(*textbox_window.getyx())
    finally:
        noecho()
        cbreak()
    return key_sequence


def toggle_pomodoro():
    pass


def stop():
    pass


def done(task_window, textbox_window, status_window):
    number = input_tasknum(textbox_window, status_window)
    run(['task', number, 'done'], stdout=PIPE)


def input_tasknum(textbox_window, status_window):
    number = input_sequence(textbox_window, status_window,
                            "Enter the task's number")

    while True:
        try:
            int(number)
            return number
        except ValueError:
            number = input_sequence(textbox_window, status_window,
                                    "Please enter a valid number")


def add(task_window, textbox_window, status_window):
    name = input_sequence(textbox_window, status_window,
                          "Enter the new task's data")
    run(['task', 'add'] + name.split(), stdout=PIPE)


def delete(task_window, textbox_window, status_window):
    number = input_tasknum(textbox_window, status_window)
    run(['task', number, 'delete', 'rc.confirmation=off'], stdout=PIPE)


def modify(task_window, textbox_window, status_window):
    number = input_tasknum(textbox_window, status_window)
    name = input_sequence(textbox_window, status_window,
                          "Enter the modified task's data")
    run(['task', number, 'modify'] + name.split(), stdout=PIPE)


def custom_command(task_window, textbox_window, status_window):
    command = input_sequence(textbox_window, status_window, 'Enter your command')

    run(['task'] + command.split(), stdout=PIPE)


def refresh_tasks(task_window):
    task_window.clear()
    tasks = run(['task'], stdout=PIPE).stdout.decode('utf-8').split("\n")

    for y, task in enumerate(tasks):
        task_window.addstr(y, 1, task)

    task_window.refresh()


def write_status(status_window, status):
    status_window.clear()
    status_window.addstr(status)
    status_window.refresh()


def newborderedwin(height, width, start_y, start_x):
    borderedwindow = newwin(height, width, start_y, start_x)
    borderedwindow.clear()
    borderedwindow.border()
    borderedwindow.refresh()

    return newwin(height - 2, width - 2, start_y + 1, start_x + 1)


def main(stdscr):
    stdscr.clear()

    MAX_Y, MAX_X = stdscr.getmaxyx()
    STATUS_WINDOW_HEIGHT = 5
    TEXTBOX_WINDOW_HEIGHT = 4
    TASK_WINDOW_HEIGHT = MAX_Y - STATUS_WINDOW_HEIGHT - TEXTBOX_WINDOW_HEIGHT

    task_window = newborderedwin(TASK_WINDOW_HEIGHT, MAX_X - 1,
                                 0, 0)
    status_window = newborderedwin(STATUS_WINDOW_HEIGHT, MAX_X - 1,
                                   TASK_WINDOW_HEIGHT, 0)
    textbox_window = newborderedwin(TEXTBOX_WINDOW_HEIGHT, MAX_X - 1,
                                    TASK_WINDOW_HEIGHT + STATUS_WINDOW_HEIGHT, 0)

    refresh_tasks(task_window)

    while True:
        try:
            write_status(status_window, '(r)efresh tasks, (a)dd task, (d)elete '
                         'task, d(o)ne (mark task), (m)odify, (!)custom command,'
                         ' (p)omodoro (toggle), (s)top pomodoro, (q)uit')
            read_char = input_char(textbox_window)

            task_actions = {
                'r': refresh_tasks,
            }
            io_actions = {
                'a': add,
                'd': delete,
                'o': done,
                'm': modify,
                '!': custom_command,
            }
            other_actions = {
                'p': toggle_pomodoro,
                's': stop,
                'q': quit,
            }

            try:
                task_actions[read_char](task_window)
                continue
            except KeyError:
                pass

            try:
                action = io_actions[read_char]
                action(task_window, textbox_window, status_window)
                refresh_tasks(task_window)
                continue
            except KeyboardInterrupt:
                continue
            except KeyError:
                pass

            try:
                other_actions[read_char]()
            except KeyError:
                write_status(status_window, f'Unknown action: "{read_char}". '
                             'Press any key to continue')
                input_char(textbox_window)

        except KeyboardInterrupt:
            quit()


try:
    wrapper(main)
except error:
    print(f"An error occured while drawing {argv[0]}. My best guess is that the "
          f"window was too small")
